import { put, call, cancelled } from "redux-saga/effects";
export function bindAsyncAction(actionCreator) {
    return (worker) => {
        function* boundAsyncActionSaga(params, ...args) {
            yield put(actionCreator.started(params));
            try {
                const result = yield call(worker, params, ...args);
                yield put(actionCreator.done({ params, result }));
                return result;
            }
            catch (error) {
                yield put(actionCreator.failed({ params, error }));
                throw error;
            }
            finally {
                if (yield cancelled()) {
                    yield put(actionCreator.failed({ params, error: 'cancelled' }));
                }
            }
        }
        const capName = worker.name.charAt(0).toUpperCase() +
            worker.name.substring(1);
        return setFunctionName(boundAsyncActionSaga, `bound${capName}(${actionCreator.type})`);
    };
}
/**
 * Set function name.
 *
 * Note that this won't have effect on built-in Chrome stack traces, although
 * useful for stack traces generated by `redux-saga`.
 */
function setFunctionName(func, name) {
    try {
        Object.defineProperty(func, 'name', {
            value: name,
            configurable: true,
        });
    }
    catch (e) {
        // ignore
    }
    return func;
}
