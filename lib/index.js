'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.bindAsyncAction = bindAsyncAction;

var _effects = require('redux-saga/effects');

function bindAsyncAction(actionCreator) {
    return function (worker) {
        var _marked = [boundAsyncActionSaga].map(regeneratorRuntime.mark);

        function boundAsyncActionSaga(params) {
            var _len,
                args,
                _key,
                result,
                _args = arguments;

            return regeneratorRuntime.wrap(function boundAsyncActionSaga$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return (0, _effects.put)(actionCreator.started(params));

                        case 2:
                            _context.prev = 2;

                            for (_len = _args.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                args[_key - 1] = _args[_key];
                            }

                            _context.next = 6;
                            return _effects.call.apply(undefined, [worker, params].concat(args));

                        case 6:
                            result = _context.sent;
                            _context.next = 9;
                            return (0, _effects.put)(actionCreator.done({ params: params, result: result }));

                        case 9:
                            return _context.abrupt('return', result);

                        case 12:
                            _context.prev = 12;
                            _context.t0 = _context['catch'](2);
                            _context.next = 16;
                            return (0, _effects.put)(actionCreator.failed({ params: params, error: _context.t0 }));

                        case 16:
                            throw _context.t0;

                        case 17:
                            _context.prev = 17;
                            _context.next = 20;
                            return (0, _effects.cancelled)();

                        case 20:
                            if (!_context.sent) {
                                _context.next = 23;
                                break;
                            }

                            _context.next = 23;
                            return (0, _effects.put)(actionCreator.failed({ params: params, error: 'cancelled' }));

                        case 23:
                            return _context.finish(17);

                        case 24:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _marked[0], this, [[2, 12, 17, 24]]);
        }
        var capName = worker.name.charAt(0).toUpperCase() + worker.name.substring(1);
        return setFunctionName(boundAsyncActionSaga, 'bound' + capName + '(' + actionCreator.type + ')');
    };
}
/**
 * Set function name.
 *
 * Note that this won't have effect on built-in Chrome stack traces, although
 * useful for stack traces generated by `redux-saga`.
 */
function setFunctionName(func, name) {
    try {
        Object.defineProperty(func, 'name', {
            value: name,
            configurable: true
        });
    } catch (e) {
        // ignore
    }
    return func;
}